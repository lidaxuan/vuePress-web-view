(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{557:function(t,s,a){"use strict";a.r(s);var e=a(12),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git使用"}},[t._v("#")]),t._v(" Git使用")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#flag"}},[t._v("Flag")])]),a("li",[a("a",{attrs:{href:"#保存用户密码"}},[t._v("保存用户密码")])]),a("li",[a("a",{attrs:{href:"#代理"}},[t._v("代理")])]),a("li",[a("a",{attrs:{href:"#把空文件夹提交到仓库"}},[t._v("把空文件夹提交到仓库")])]),a("li",[a("a",{attrs:{href:"#项目远程地址管理"}},[t._v("项目远程地址管理")])]),a("li",[a("a",{attrs:{href:"#更改提交"}},[t._v("更改提交")])]),a("li",[a("a",{attrs:{href:"#强制push本地仓库到远程"}},[t._v("强制push本地仓库到远程")])]),a("li",[a("a",{attrs:{href:"#重置本地修改文件"}},[t._v("重置本地修改文件")])]),a("li",[a("a",{attrs:{href:"#清除用户名密码"}},[t._v("清除用户名密码")])]),a("li",[a("a",{attrs:{href:"#git恢复指定文件到指定版本"}},[t._v("git恢复指定文件到指定版本")])]),a("li",[a("a",{attrs:{href:"#统计"}},[t._v("统计")])]),a("li",[a("a",{attrs:{href:"#分支"}},[t._v("分支")])]),a("li",[a("a",{attrs:{href:"#submodule与subtree"}},[t._v("SubModule与SubTree")])]),a("li",[a("a",{attrs:{href:"#换行符与大文件处理"}},[t._v("换行符与大文件处理")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"flag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flag"}},[t._v("#")]),t._v(" Flag")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/progit",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/progit"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://git-scm.com/book",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://git-scm.com/book"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/progit/progit2-zh",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/progit/progit2-zh"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/progit-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/progit-cn"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[t._v("Pro Git 中文版（第二版） "),a("a",{attrs:{href:"https://progit.bootcss.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://progit.bootcss.com"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://codechina_dev.gitcode.host/progit2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codechina_dev.gitcode.host/progit2"),a("OutboundLink")],1)])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/apachecn/git-doc-zh",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/apachecn/git-doc-zh"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://git.apachecn.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git.apachecn.org"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.kancloud.cn/leviio/git/330946",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用命令 · git笔记 · 看云"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.moewah.com/archives/2292.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 常用命令及使用详解 - 喵斯基部落"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Git速查手册 "),a("a",{attrs:{href:"https://github.com/arslanbilal/git-cheat-sheet",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/arslanbilal/git-cheat-sheet"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.rumosky.wiki/docs/learngit",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.rumosky.wiki/docs/learngit"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[t._v("Git的奇技淫巧: "),a("a",{attrs:{href:"https://github.com/521xueweihan/git-tips",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/521xueweihan/git-tips"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("猴子都能懂的GIT入门: "),a("a",{attrs:{href:"https://backlog.com/git-tutorial/cn/contents",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://backlog.com/git-tutorial/cn/contents"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://website-proxy.backlogtool.com/git-tutorial/cn/reference/git-svn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git与Subversion的命令对比表"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/libgit2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/libgit2"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("在线学 Git "),a("a",{attrs:{href:"https://codechina_dev.gitcode.host/learn-git-branching",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codechina_dev.gitcode.host/learn-git-branching"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/pcottle/learnGitBranching",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/pcottle/learnGitBranching"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[t._v("Git大全 "),a("a",{attrs:{href:"https://gitee.com/all-about-git",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitee.com/all-about-git"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/kunyus/article/details/93472646",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 团队协作中常用术语 WIP PTAL CC LGTM 等解释"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/files/git-pull.bat"}},[t._v("git-pull.bat")])]),t._v(" "),a("li",[a("a",{attrs:{href:"/files/git-pull.sh"}},[t._v("git-pull.sh")])])]),t._v(" "),a("blockquote",[a("p",[t._v("脚本没有写的权限：在"),a("code",[t._v("git-bash.exe")]),t._v("文件或快捷方式上鼠标"),a("code",[t._v("右键")]),t._v(" -> "),a("code",[t._v("属性")]),t._v(" -> "),a("code",[t._v("兼容性")]),t._v(" -> 勾选"),a("code",[t._v("以管理员身份运行此程序")]),t._v(" -> "),a("code",[t._v("确定")])])]),t._v(" "),a("p",[a("strong",[a("RouterLink",{attrs:{to:"/Other/编程规范.html#commit提交规范"}},[t._v("Commit提交规范")])],1)]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("--global")]),t._v("代表全局，保存的配置在用户目录中，Windows在cmd中输入命令查看："),a("code",[t._v("type %USERPROFILE%\\.gitconfig")])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git clone url --depth 1")]),t._v(" 克隆最新一条提交记录")]),t._v(" "),a("li",[a("code",[t._v("git clone url --recursive")]),t._v(" 递归克隆")]),t._v(" "),a("li",[a("code",[t._v("git fetch --unshallow")]),t._v(" 完整克隆")])]),t._v(" "),a("h2",{attrs:{id:"保存用户密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保存用户密码"}},[t._v("#")]),t._v(" 保存用户密码")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global --edit\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置项目个人邮箱")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your email"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置项目个人用户名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your username"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 永久保存凭证")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global credential.helper store\n")])])]),a("blockquote",[a("p",[t._v("在"),a("code",[t._v("~/.gitconfig")]),t._v("中会自动在"),a("code",[t._v("[credential]")]),t._v("节点下添加"),a("code",[t._v("helper = store")])])]),t._v(" "),a("blockquote",[a("p",[t._v("保存的账户密码在"),a("code",[t._v("~/.git-credentials")]),t._v("中")])]),t._v(" "),a("h2",{attrs:{id:"代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("git config --global https.sslverify false")]),t._v(" 不验证SSL")])]),t._v(" "),a("p",[a("strong",[t._v("设置代理")])]),t._v(" "),a("ul",[a("li",[t._v("使用命令设置")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --global全局（会在.gitconfig文件中添加相关配置，所以可手动编辑文件），去掉或者使用--local为当前仓库（局部）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 --unset 参数可取消设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# socks5代理，如果是http则把socks5替换为http，https同理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global http.proxy "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'socks5://127.0.0.1:10808'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global https.proxy "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'socks5://127.0.0.1:10808'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只针对某个域名代理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global https."),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com"')]),t._v(".proxy "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"socks5://127.0.0.1:10808"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最优方式，--add参数会添加多个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config remote.origin.proxy "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"socks5://127.0.0.1:10808"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 替换为镜像URL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global url."),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com"')]),t._v(".insteadOf "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hub.fastgit.org"')]),t._v("\n")])])]),a("h2",{attrs:{id:"把空文件夹提交到仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把空文件夹提交到仓库"}},[t._v("#")]),t._v(" 把空文件夹提交到仓库")]),t._v(" "),a("blockquote",[a("p",[t._v("这个只能说是技巧不能说是方法，原理是在每个空文件夹新建一个.gitignore文件")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -type d -empty -exec "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/.gitignore "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"项目远程地址管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目远程地址管理"}},[t._v("#")]),t._v(" 项目远程地址管理")]),t._v(" "),a("blockquote",[a("p",[t._v("见"),a("code",[t._v("项目目录/.git/config")]),t._v("中的"),a("code",[t._v("remote")]),t._v("节点，"),a("code",[t._v("origin")]),t._v("为默认远程节点名，可以自定义")])]),t._v(" "),a("ul",[a("li",[t._v("查看当前的远程地址")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n")])])]),a("ul",[a("li",[t._v("删除"),a("code",[t._v("origin")]),t._v("节点的远程地址")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" origin\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote remove origin\n")])])]),a("ul",[a("li",[t._v("为"),a("code",[t._v("origin")]),t._v("节点添加远程地址")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin 远程地址\n")])])]),a("ul",[a("li",[t._v("修改"),a("code",[t._v("origin")]),t._v("节点远程地址")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url origin 远程地址\n")])])]),a("ul",[a("li",[t._v("为"),a("code",[t._v("origin")]),t._v("节点增加一个远程地址")])]),t._v(" "),a("blockquote",[a("p",[t._v("可同时拉取或推送到多个远程地址")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url --add origin 远程地址\n")])])]),a("ul",[a("li",[t._v("把当前分支与"),a("code",[t._v("origin")]),t._v("节点远程分支进行关联")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin 分支名称\n")])])]),a("h2",{attrs:{id:"更改提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更改提交"}},[t._v("#")]),t._v(" 更改提交")]),t._v(" "),a("blockquote",[a("p",[t._v("如果commit注释写错了，只是想改一下注释")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交文件，里面包含注释和变更内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 按v进入编辑模式，更改完成后按esc然后输入:qw! 保存")]),t._v("\n")])])]),a("ul",[a("li",[t._v("撤销提交")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --mixed 默认参数，不删除工作空间改动代码，撤销commit，并且撤销git add . 操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --soft 不删除工作空间改动代码，撤销commit，不撤销git add . ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --hard 删除工作空间改动代码，撤销commit，撤销git add . ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEAD^的代表上一个版本，同HEAD~1(或HEAD@{1})，撤销2次commit，使用HEAD~2(或HEAD@{2})，以此类推")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^\n")])])]),a("h2",{attrs:{id:"强制push本地仓库到远程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制push本地仓库到远程"}},[t._v("#")]),t._v(" 强制push本地仓库到远程")]),t._v(" "),a("blockquote",[a("p",[t._v("这种情况不会进行merge, 强制push后远程文件可能会丢失,不建议使用此方法")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将本地仓库文件push到远程仓库（-f代表强制 --force）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --allow-unrelated-histories 允许合并不相关的历史")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u -f origin master\n")])])]),a("h2",{attrs:{id:"重置本地修改文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重置本地修改文件"}},[t._v("#")]),t._v(" 重置本地修改文件")]),t._v(" "),a("blockquote",[a("p",[t._v("如果有任何本地更改，将会丢失。无论是否有--hard选项，任何未被推送的本地提交都将丢失。\n如果您有任何未被Git跟踪的文件(例如上传的用户内容)，这些文件将不会受到影响。")])]),t._v(" "),a("ul",[a("li",[t._v("在重置之前可以通过从master创建一个分支来维护当前的本地提交")])]),t._v(" "),a("blockquote",[a("p",[t._v("在此之后，所有旧的提交都将保存在新的分支中。然而，没有提交的更改(即使staged)将会丢失。确保存储和提交任何你需要的东西。")])]),t._v(" "),a("ul",[a("li",[t._v("执行重置")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从远程下载最新的，而不尝试合并或rebase任何东西")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --all\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# reset将主分支重置为本地commit的最新版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --hard选项更改工作树中的所有文件以匹配origin/<branch_name>中的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard origin/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取远端最新代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂时忽略对文件做的修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-index --assume-unchanged 路径\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新标识对文件做的修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-index --no-assume-unchanged 路径\n")])])]),a("h2",{attrs:{id:"清除用户名密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清除用户名密码"}},[t._v("#")]),t._v(" 清除用户名密码")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --system --unset credential.helper\n")])])]),a("h2",{attrs:{id:"git恢复指定文件到指定版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git恢复指定文件到指定版本"}},[t._v("#")]),t._v(" git恢复指定文件到指定版本")]),t._v(" "),a("ul",[a("li",[t._v("查看commit历史，并复制需要回退版本的hash")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者git reflog show")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log 文件名\n")])])]),a("ul",[a("li",[t._v("恢复")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout 复制的hash值 文件名\n")])])]),a("ul",[a("li",[t._v("删除包括历史")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch --force --index-filter "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm --cached --ignore-unmatch src/main/java/com/bajins/demo/xxx.java"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --prune-empty --tag-name-filter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -- --all\n")])])]),a("h2",{attrs:{id:"统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统计"}},[t._v("#")]),t._v(" 统计")]),t._v(" "),a("ul",[a("li",[t._v("查看git上的个人代码量")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"用户名"')]),t._v(" --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tformat: --numstat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{ add += $1; subs += $2; loc += $1 - $2 } END \\\n  { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }'")]),t._v(" -\n")])])]),a("ul",[a("li",[t._v("统计每个人增删行数")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%aN'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" -u "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -en "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tformat: --numstat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, \\\n  removed lines: %s, total lines: %s\\n\", add, subs, loc }'")]),t._v(" -"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看仓库提交者排名前五")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%aN'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uniq")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" -k1 -n -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 贡献值统计")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%aN'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" -u "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -l\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交数统计")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -l\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加或修改的代码行数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --stat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("perl -ne "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'END { print $c } $c += $1 if /(\\d+) insertions/'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比较远端和本地分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" master origin/master\n")])])]),a("ul",[a("li",[t._v("统计文件的改动")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --stat master origin/master\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行一次git fetch origin xxx，那当下最新版本的commit会存在FETCH_HEAD中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD FETCH_HEAD\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --dry-run "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -q -v "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Already up-to-date.'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("changed")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log HEAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".origin/master --oneline\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -p master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("origin/master\n")])])]),a("ul",[a("li",[t._v("本地与远程的差集")])]),t._v(" "),a("blockquote",[a("p",[t._v("显示远程有而本地没有的"),a("code",[t._v("commit")]),t._v("信息")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("origin/master\n")])])]),a("h2",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("ul",[a("li",[t._v("查看本地分支"),a("code",[t._v("git branch")])]),t._v(" "),a("li",[t._v("查看远程分支"),a("code",[t._v("git branch -r")])]),t._v(" "),a("li",[t._v("查看所有分支"),a("code",[t._v("git branch -a")])]),t._v(" "),a("li",[t._v("本地创建新的分支"),a("code",[t._v("git branch [branch name]")])]),t._v(" "),a("li",[t._v("切换到新的分支"),a("code",[t._v("git checkout [branch name]")])]),t._v(" "),a("li",[t._v("创建+切换分支"),a("code",[t._v("git checkout -b [branch name]")])]),t._v(" "),a("li",[t._v("推送到指定分支"),a("code",[t._v("git push origin [branch name]")])]),t._v(" "),a("li",[t._v("删除本地分支"),a("code",[t._v("git branch -d [branch name]")])]),t._v(" "),a("li",[t._v("删除远程分支,分支名前的冒号代表删除"),a("code",[t._v("git push origin :[branch name]")])]),t._v(" "),a("li",[a("code",[t._v("for b in git branch -r | grep -v -- '->'; do git branch --track ${b##origin/} $b; done")]),t._v(" "),a("a",{attrs:{href:"https://gitee.com/help/articles/4284#%E6%96%B9%E6%B3%95%E4%BA%8C%E6%8E%A8%E8%8D%90%E6%AF%94%E8%BE%83%E5%A4%9A%E5%88%86%E6%94%AF%E7%9A%84%E4%BB%93%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("一次性拉取仓库的所有分支"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"submodule与subtree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#submodule与subtree"}},[t._v("#")]),t._v(" SubModule与SubTree")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - 子模块"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[t._v("submodule只存在引用，代码Pull和Push都只能和 被依赖的项目关联。类似于引用")]),t._v(" "),a("li",[t._v("subtree直接克隆被依赖项目，代码Pull和Push根据需要和主项目或被依赖项目关联。类似于拷贝")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("/")]),t._v(" "),a("th",[t._v("submodule")]),t._v(" "),a("th",[t._v("subtree")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("远程仓库空间占用")]),t._v(" "),a("td",[t._v("submodule只是引用，基本不占用额外空间")]),t._v(" "),a("td",[t._v("子模块copy，会占用较大的额外空间")]),t._v(" "),a("td",[t._v("submodule占用空间较小，略优")])]),t._v(" "),a("tr",[a("td",[t._v("本地空间占用")]),t._v(" "),a("td",[t._v("可根据需要下载")]),t._v(" "),a("td",[t._v("会下载整个项目")]),t._v(" "),a("td",[t._v("所有模块基本都要下载，二者差异不大")])]),t._v(" "),a("tr",[a("td",[t._v("仓库克隆")]),t._v(" "),a("td",[t._v("克降后所有子模块为空，需要注册及更新，同时更新后还需切换分支")]),t._v(" "),a("td",[t._v("克隆之后即可使用")]),t._v(" "),a("td",[t._v("submodule步骤略多，subtree占优")])]),t._v(" "),a("tr",[a("td",[t._v("更新本地仓库")]),t._v(" "),a("td",[t._v("更新后所有子模块后指向最后一次提交，更新后需要重新切回分支，所有子模块只需一条更新语句即可")]),t._v(" "),a("td",[t._v("所有子模块需要单独更新")]),t._v(" "),a("td",[t._v("各有优劣，相对subtree更好用一些")])]),t._v(" "),a("tr",[a("td",[t._v("提交本地修改")]),t._v(" "),a("td",[t._v("只需关心子模块即可，子模块的所有操作与普通git项目相同")]),t._v(" "),a("td",[t._v("提交执行命令相对复杂一些")]),t._v(" "),a("td",[t._v("submodule操作更简单，submodule占优")])])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git submodule add 链接 路径")]),t._v(" 添加子模块，路径建议使用"),a("code",[t._v("_")])]),t._v(" "),a("li",[a("code",[t._v("git submodule init")]),t._v(" 初始化子模块")]),t._v(" "),a("li",[a("code",[t._v("git submodule update")]),t._v(" 下载子模块源码")]),t._v(" "),a("li",[a("code",[t._v("git submodule update --init --recursive")]),t._v(" 递归下载子模块的源码，并初始化")]),t._v(" "),a("li",[a("code",[t._v("git submodule foreach 'git checkout -f'")]),t._v(" git强制更新所有submodule")]),t._v(" "),a("li",[a("code",[t._v("git pull")]),t._v(" 把子模块看作单独的仓库，进入到子模块目录下，更新submodule，拉取后项目有需要提交的更新")]),t._v(" "),a("li",[a("code",[t._v("git clone url --recurse-submodules")]),t._v(" 递归地将项目中所有子模块的代码拉取")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/61163082/why-does-git-submodule-update-fail-with-fatal-remote-error-upload-pack-not-o",target:"_blank",rel:"noopener noreferrer"}},[t._v("子模块有修改未提交，报错fatal: remote error: upload-pack: not our ref"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("删除子模块")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("vim .gitmodules")]),t._v(" 移除子模块的索引信息")]),t._v(" "),a("li",[a("code",[t._v("git submodule deinit")]),t._v(" 删除"),a("code",[t._v(".git/config")]),t._v("中的模块信息，加上参数"),a("code",[t._v("--force")]),t._v("子模块工作区内即使有本地的修改，也会被移除")]),t._v(" "),a("li",[a("code",[t._v("rm -rf 模块文件夹")]),t._v(" 删除子模块目录文件")]),t._v(" "),a("li",[a("code",[t._v("rm -rf .git/modules/模块名")]),t._v(" 移除子模块的其他信息")]),t._v(" "),a("li",[a("code",[t._v("git rm --cached 模块名")]),t._v(" 删除缓存，提示"),a("code",[t._v("fatal: pathspec 'xxxxx' did not match any files")]),t._v(" 说明删除干净了")])]),t._v(" "),a("h2",{attrs:{id:"换行符与大文件处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#换行符与大文件处理"}},[t._v("#")]),t._v(" 换行符与大文件处理")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/Shell/#行尾序列"}},[t._v("行尾序列（换行符）")])],1),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000013973362",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git处理换行符问题"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.github.com/cn/free-pro-team@latest/github/using-git/configuring-git-to-handle-line-endings",target:"_blank",rel:"noopener noreferrer"}},[t._v("为单个仓库或全局配置 Git 处理行结束符"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[t._v("当你在签出文件时，将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；")]),t._v(" "),a("li",[t._v("当你在提交文件时，将 CRLF 替换为 LF。")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果提交的文件是一个 包含中文字符的UTF-8文件，那么这个“换行符自动转换”功能在提交时不是每次都生效，\n尤其是文件中出现中文字符后有换行符时（但签出时的转换处理没有问题）")])]),t._v(" "),a("p",[a("strong",[t._v("gitattributes")])]),t._v(" "),a("ul",[a("li",[t._v("为单个仓库设置 "),a("a",{attrs:{href:"https://git-scm.com/docs/gitattributes",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-scm.com/docs/gitattributes"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.2 自定义 Git - Git 属性"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git.apachecn.org/#/docs/39",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitattributes"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/topics/gitattributes",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/topics/gitattributes"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/gitattributes",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/gitattributes"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/alexkaratarakis/gitattributes",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/alexkaratarakis/gitattributes"),a("OutboundLink")],1)])])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("text")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("linguist-language")]),t._v(" 设置语言")]),t._v(" "),a("li",[a("code",[t._v("working-tree-encoding")]),t._v(" 设置字符集编码")]),t._v(" "),a("li",[a("code",[t._v("eol")]),t._v(" 设置换行符（"),a("code",[t._v("crlf")]),t._v("、"),a("code",[t._v("lf")]),t._v("）")])])]),t._v(" "),a("li",[a("code",[t._v("-text")])]),t._v(" "),a("li",[a("code",[t._v("text=string")])]),t._v(" "),a("li",[a("code",[t._v("text=auto")]),t._v(" 让git自行处理左边匹配的文件使用何种换行符格式，这是默认选项。")]),t._v(" "),a("li",[t._v("未声明，通常不出现该属性即可")]),t._v(" "),a("li",[a("code",[t._v("!text")]),t._v(" 为了覆盖其他文件中的声明，效果同上")]),t._v(" "),a("li",[a("code",[t._v("binary")]),t._v(" 指定为二进制文件，不应该对其中的换行符进行改变。和"),a("code",[t._v("-text -diff")]),t._v("等价")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/bajins/notes-vuepress/blob/master/.gitattributes",target:"_blank",rel:"noopener noreferrer"}},[t._v(".gitattributes示例文件"),a("OutboundLink")],1)])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成.gitattributes文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"* text=auto"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".gitattributes\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新规范化所有被git管理的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --renormalize "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示将被规范化的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Introduce end-of-line normalization"')]),t._v("\n")])])]),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/editorconfig",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/editorconfig"),a("OutboundLink")],1),t._v(" "),a("code",[t._v(".editorconfig")]),t._v("中设置"),a("code",[t._v("end_of_line = lf")])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/axvr/ascribe.vim",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/axvr/ascribe.vim"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("全局为所有仓库设置")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# windows 下是 autocrlf")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交时转换为LF，检出时转换为CRLF")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.autocrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交时转换为LF，检出时不转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.autocrlf input\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推荐，项目中指定了换行，则在任何平台都只用一种换行 \\n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交检出均不转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.autocrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SafeCRLF")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推荐，拒绝提交包含混合换行符的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.safecrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许提交包含混合换行符的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.safecrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交包含混合换行符的文件时给出警告")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.safecrlf warn\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置行结束符的类型为lf")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.eol lf\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置行结束符的类型为crlf")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.eol crlf\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置行结束符的类型为native, native是指平台默认的行结束符。默认的类型是native")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.eol native\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该命令表示提交命令的时候使用utf-8编码集提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global i18n.commitencoding utf-8\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该命令表示日志输出时使用utf-8编码集显示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global i18n.logoutputencoding utf-8\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置LESS字符集为utf-8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("LESSCHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf-8\n")])])]),a("p",[a("strong",[t._v("Git LFS")])]),t._v(" "),a("ul",[a("li",[t._v("对大型文件进行版本控制 "),a("a",{attrs:{href:"https://github.com/git-lfs",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/git-lfs"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://git-lfs.github.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-lfs.github.com"),a("OutboundLink")],1)])])])]),t._v(" "),a("blockquote",[a("p",[t._v("Git LFS（Large File Storage, 大文件存储）可以把指定的任意文件存在 Git 仓库之外，\n而在 Git 仓库中用一个占用空间 1KB 不到的文本指针，可以减小 Git 仓库本身的体积来代替的小工具。")])]),t._v(" "),a("blockquote",[a("p",[t._v("git每次保存diff，一些大文件发生变化时，整个仓库就会增加很大的体积，导致clone和pull的数据量大增。\ngit push的时候，git lfs会截取要管理的大文件，并将其传至git lfs的服务器中，从而减小仓库的体积。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v('git lfs track "*.gz"')]),t._v(" 添加文件到"),a("code",[t._v(".gitattributes")]),t._v("追踪记录文件中")]),t._v(" "),a("li",[a("code",[t._v("git lfs ls-files")]),t._v(" 显示当前提交后跟踪的文件列表")]),t._v(" "),a("li",[a("code",[t._v("git lfs clone")]),t._v(" 克隆追踪的文件")])])])}),[],!1,null,null,null);s.default=n.exports}}]);